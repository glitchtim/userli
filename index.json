[
{
	"uri": "/userli/installation/database/",
	"title": "Create database",
	"tags": [],
	"description": "",
	"content": "Create Userli database and database user.\nFor simplicity, the user has full access to userli database.\nmysql -e 'CREATE DATABASE userli' mysql -e 'CREATE USER `userli`@`localhost` IDENTIFIED BY \u0026quot;\u0026lt;password\u0026gt;\u0026quot;' mysql -e 'GRANT ALL PRIVILEGES ON userli.* TO `userli`@`localhost`' "
},
{
	"uri": "/userli/development/documentation/",
	"title": "Documentation",
	"tags": [],
	"description": "Built with Hugo and hosted on Github Pages",
	"content": "This page describes how to edit the documentation you\u0026rsquo;re currently reading. The whole documentation is located in the directory hugo. Change into this directory. All following commands are supposed to be run from here.\ncd hugo Requirements Download Hugo binary for your OS (Windows, Linux, Mac).\nEditing Change files in hugo/content to edit the documentation. See the DocDock documentation for more information on how to organize content. Afterwards, commit your work to your repository.\ngit commit -a Testing Run hugo locally to see if your content looks like you imagined.\nhugo server Open http://localhost:1313/ in your local browser.\nPublishing Run the following script to commit to the branch gh-pages. From there, github auto-deploys the documentation.\n./publish_docs.sh See Hugo documentation for more details.\n"
},
{
	"uri": "/userli/getting-started/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "The easiest way to install Userli on a fresh Debian Buster is running these commands:\n# install dependencies sudo apt update \u0026amp;\u0026amp; sudo apt install -y ansible git python3-pip sudo pip3 install molecule # re-run in case of error # get code git clone https://github.com/systemli/ansible-role-userli.git cd ansible-role-userli # install apache2, mariadb, php7.3 and userli sudo molecule converge -s localhost  This installs all dependencies, creates a database and database user (name: userli, password: userli), and installs the userli code at /var/www/userli. It is accessible via http://localhost:8080. There, you can create the first domain and user for your instance.\nDo not run this configuration in production. Next, you would have to change the password of the database user, configure your instance, and probably install Dovecot to do anything meaningful.\nBetter, do a manual installation to understand each part of your configuration.\n"
},
{
	"uri": "/userli/mail_crypt/legacy/",
	"title": "Migrating legacy users",
	"tags": [],
	"description": "",
	"content": "Legacy users (without MailCrypt keys) continue to work without mailbox encryption. If they generate a recovery token manually in the account settings, a MailCrypt key pair gets created for them. This doesn\u0026rsquo;t enable MailCrypt for them automatically, though. Reason is that this would result in acounts with partially unencrypted (the old) and partially encrypted (the new) mails. Therefore we decided to leave the exercise to enable MailCrypt for legacy users who got a MailCrypt key pair generated in the meantime to the system admins (e.g. by a cron script).\nIn order to enable MailCrypt for a legacy user, do the following:\n Ensure that they have a recovery token generated. This will automatically generate MailCrypt key pair as well. This step can only be done by the account holder, as the user password is required to do so. Manually set mail_crypt=1 for the user in the virtual_users database table. This needs to be done on a per-user basis on purpose (e.g. by a cron script).  Or, alternatively, to enforce MailCrypt for all legacy users:\n Set MAIL_CRYPT=3 in the dotenv (.env) file. This will result in a MailCrypt key pair being generated automatically when legacy users log in the next time. Again, we cannot do this step without the user logging in, as the user password is required to do so. Manually set mail_crypt=1 for all users in the virtual_users database table that have a MailCrypt key pair generated but MailCrypt not enabled yet. This needs to be done on a per-user basis on purpose (e.g. by a cron script).  Please note that existing mails will not be encrypted automatically. Instead, all existing mail stays unencrypted and only new incoming mail will be stored encrypted.\nIn bin/mailcrypt-encrypt-maildir you find a script to encrypt unencrypted mail from legacy mailboxes that already have a MailCrypt key configured. This script needs to be invoked as a user who has write access to the mailbox in question - probably the best is to run it as root:\n./bin/mailcrypt-encrypt-maildir user@example.org  The following SQL statement can be used to enable MailCrypt for all legacy users that got a MailCrypt key pair generated. Use with caution!\nUPDATE virtual_users SET mail_crypt=1 WHERE mail_crypt_secret_box IS NOT NULL AND mail_crypt = 0;  We might add a migration script to encrypt old mails from existing users at a later point.\n"
},
{
	"uri": "/userli/screenshots/recovery/",
	"title": "Recover lost password",
	"tags": [],
	"description": "",
	"content": "Manage recovery token\nAdd recovery token\nUse recovery token\n"
},
{
	"uri": "/userli/screenshots/account/",
	"title": "Account management",
	"tags": [],
	"description": "Change password and delete account",
	"content": ""
},
{
	"uri": "/userli/development/code_of_conduct/",
	"title": "Code of Conduct",
	"tags": [],
	"description": "Everyone welcome",
	"content": "Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\nOur Standards Examples of behavior that contributes to creating a positive environment include:\n Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members  Examples of unacceptable behavior by participants include:\n The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting  Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\nScope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\nEnforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at userli@systemli.org. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project\u0026rsquo;s leadership.\nAttribution This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\nFor answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq\n"
},
{
	"uri": "/userli/installation/code/",
	"title": "Get the code",
	"tags": [],
	"description": "",
	"content": "Install the latest release.\nDownload and unpack the actual source code.\nmkdir userli \u0026amp;\u0026amp; cd userli wget https://github.com/systemli/userli/releases/download/x.x.x/userli-x.x.x.tar.gz # Check signature and hash sum, if you know how to tar -xvzf userli-x.x.x.tar.gz "
},
{
	"uri": "/userli/mail_crypt/details/",
	"title": "Implementation details",
	"tags": [],
	"description": "Cryptographic primitives",
	"content": "We use elliptic curve keys with curve secp521r1. The private key is encrypted with a libargon2i hash of the users' password, stored in a libsodium secret box.\nA second copy of the private key is stored encrypted with a libargon2i hash of the users' recovery token, to be used when a user restores their account after they lost their password.\n"
},
{
	"uri": "/userli/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": "Requirements  Webserver (e.g Caddy) PHP \u0026gt;= 7.3 with libsodium MariaDB or MySQL OpenSSL binary (for MailCrypt feature) GnuPG version 2.1.14 or newer  You can also run this application with PostgreSQL oder SQLite.\nCreate databaseGet the codeConfigurationFinalize the setupWebserver configurationCustomizeCheckpasswordCommands"
},
{
	"uri": "/userli/screenshots/alias/",
	"title": "Alias addresses",
	"tags": [],
	"description": "Manage alias addresses",
	"content": ""
},
{
	"uri": "/userli/installation/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": "You can personalize your Userli instance by creating .env.local, which overrides some values from .env. You should at least configure the following values.\nAPP_ENV=prod APP_SECRET=\u0026lt;random secret string\u0026gt; APP_URL=https://users.example.org DATABASE_URL=mysql://userli:\u0026lt;password\u0026gt;@127.0.0.1:3306/userli MAILER_URL=smtp://localhost:25?encryption=\u0026amp;auth_mode= PROJECT_NAME=example.org PROJECT_URL=https://www.example.org SENDER_ADDRESS=userli@example.org NOTIFICATION_ADDRESS=admin@example.org Look into .env to get more information about variables and how to handle them.\n"
},
{
	"uri": "/userli/development/release/",
	"title": "Creating release tarballs",
	"tags": [],
	"description": "",
	"content": "Release tarballs are the preferred way to install Userli. This page explains how to create them.\nFirst, you\u0026rsquo;ll need a Github API token. The token needs the following priviledges:\npublic_repo, repo:status, repo_deployment  Now, execute the following script. It will create a version tag, release and copy the info from CHANGELOG.md to the release info.\n$ GITHUB_API_TOKEN=\u0026lt;token\u0026gt; GPG_SIGN_KEY=\u0026quot;\u0026lt;key_id\u0026gt;\u0026quot; ./bin/github-release.sh \u0026lt;version\u0026gt; "
},
{
	"uri": "/userli/development/",
	"title": "Development",
	"tags": [],
	"description": "",
	"content": "Requirements  Vagrant  Start Vagrant box git submodule update --init vagrant up \u0026amp;\u0026amp; vagrant ssh # create database and schema bin/console doctrine:schema:create # load sample data bin/console doctrine:fixtures:load # get node modules yarn # update assets yarn encore dev  The doctrine:fixtures:load command will create four new accounts with corresponding roles (admin, user, support, suspicious) as well as some random aliases and vouchers. The domain for all accounts is \u0026ldquo;example.org\u0026rdquo; and the password is \u0026ldquo;password\u0026rdquo;.\nIf you want to see more details about how the users are created, see src/DataFixtures.\nVisit you local instance at http://192.168.33.99/.\nDocumentationCode of ConductCreating release tarballsCoding styleTestsIcons"
},
{
	"uri": "/userli/screenshots/admin/",
	"title": "Admin Frontend",
	"tags": [],
	"description": "",
	"content": "Manage domains, users, aliases and more\n"
},
{
	"uri": "/userli/development/coding_style/",
	"title": "Coding style",
	"tags": [],
	"description": "",
	"content": "We use the default Symfony coding style.\nCheck and adjust coding style by running php-cs-fixer:\nmake cs-fixer "
},
{
	"uri": "/userli/installation/finalize/",
	"title": "Finalize the setup",
	"tags": [],
	"description": "",
	"content": "Last steps to make Userli work properly.\nCreate database scheme # Create default database schema bin/console doctrine:schema:create # Load default reserved names into database bin/console app:reservednames:import # Warm up cache bin/console cache:warmup  Configure Dovecot Configure Dovecot to use separate directories per domain and user. Change the mail_location in 10-mail.conf to something like this:\nmail_location = maildir:~/%d/%n  Cronjobs Some cronjobs are needed in order to run regular tasks:\n# Daily purge data from deleted mail users @daily userli cd /path/to/userli \u0026amp;\u0026amp; bin/console app:users:remove -q # Daily unlink old redeemed vouchers @daily userli cd /path/to/userli \u0026amp;\u0026amp; bin/console app:voucher:unlink # Send weekly report to admins 12 13 * * 1 userli cd /path/to/userli \u0026amp;\u0026amp; bin/console app:report:weekly "
},
{
	"uri": "/userli/screenshots/voucher/",
	"title": "Invite friends",
	"tags": [],
	"description": "Invite codes",
	"content": ""
},
{
	"uri": "/userli/mail_crypt/",
	"title": "MailCrypt",
	"tags": [],
	"description": "",
	"content": "The software has builtin support for Dovecot\u0026rsquo;s mailbox encryption, using the global keys mode. Keys are created and maintained by userli and handed over to Dovecot via checkpassword script.\nThe MailCrypt feature is enabled per default and can optionally be switched off globally by setting MAIL_CRYPT=0 in the dotenv (.env) file.\nIf you want to enable MailCrypt for some users, but don\u0026rsquo;t want new users to have MailCrypt enabled per default, you can set MAIL_CRYPT=1 in the dotenv (.env) file. The following values are supported for MAIL_CRYPT:\n MAIL_CRYPT=0 - Disable MailCrypt globally MAIL_CRYPT=1 - Allow to use MailCrypt, needs to be enabled manually for new users MAIL_CRYPT=2 - Enforce MailCrypt key generation for new users MAIL_CRYPT=3 - Enforce MailCrypt key generation for all users, see the documentation about migrating legacy users for more info  In order to enable MailCrypt in Dovecot, the following is required:\n Add mail_crypt to the mail_plugins list in /etc/dovecot/conf.d/10-mail.conf Set mail_crypt_save_version = 0 in /etc/dovecot/conf.d/90-mail-crypt.conf  The latter disables MailCrypt per default and is necessary to not break incoming mail for legacy users without MailCrypt keys. The checkpassword script automatically sets mail_crypt_save_version = 2 for all users with MailCrypt keys.\nMailCrypt can be turned on/off for individual users by setting the mail_crypt switch in the virtual_users database table. This switch is mainly meant to provide a migration path from legacy users without MailCrypt keys. On new setups, it\u0026rsquo;s recommended to keep MailCrypt enabled for all users.\nMigrating legacy usersImplementation details"
},
{
	"uri": "/userli/development/tests/",
	"title": "Tests",
	"tags": [],
	"description": "How to test during development",
	"content": "Linting, unit tests and functional tests vagrant up \u0026amp;\u0026amp; vagrant ssh make test make integration  Test checkpassword script vagrant up \u0026amp;\u0026amp; vagrant ssh bin/console doctrine:schema:create -n \u0026amp;\u0026amp; bin/console doctrine:fixture:load -n \u0026amp;\u0026amp; exit cd .. \u0026amp;\u0026amp; tests/test_checkpassword_login.sh  "
},
{
	"uri": "/userli/wkd/",
	"title": "Web Key Directory",
	"tags": [],
	"description": "",
	"content": "Userli brings support for OpenPGP Web Key Directory, a OpenPGP key discovery system. Users can import and update their OpenPGP key and it will be published in the Web Key Directory according to the OpenPGP Web Key Directory Internet Draft.\nThe WKD feature depends on GnuPG being installed.\nThe WKD directory path can be configured by setting WKD_DIRECTORY in the dotenv (.env) file. Write access to the WKD directory is required.\nThe WKD directory format can be configured by setting WKD_FORMAT in the dotenv (.env) file. The supported settings are advanced (default) and direct. See the OpenPGP Web Key Directory Internet Draft for details.\nThe WKD directory can be regenerated at any time by running the console command:\nbin/console app:wkd:export-keys  "
},
{
	"uri": "/userli/installation/webserver/",
	"title": "Webserver configuration",
	"tags": [],
	"description": "",
	"content": "Userli has to be installed like any other Symfony application.\nBelow, you\u0026rsquo;ll find some example configurations for webservers. Don\u0026rsquo;t blindly copy them, but adjust them to your needs.\nCaddy\n:8080 gzip root /var/www/userli/public # PHP-FPM Configuration fastcgi / /run/php/php7.3-fpm.sock php rewrite { to {path} /index.php?{query} }  Nginx\nserver { listen 80; root /vagrant/public; index index.php; location / { try_files $uri /index.php$is_args$args; } error_page 404 /404.html; error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/www; } location ~ ^/index\\.php(/|$) { fastcgi_split_path_info ^(.+\\.php)(/.*)$; fastcgi_pass unix:/var/run/php/php7.3-fpm.sock; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param HTTPS off; } }  Apache2\n\u0026lt;VirtualHost *:80\u0026gt; ServerName users.example.org ServerAdmin admin@example.org RewriteEngine On RewriteRule .* https://%{SERVER_NAME}%{REQUEST_URI} [NE,R,L] \u0026lt;/VirtualHost\u0026gt; \u0026lt;VirtualHost *:443\u0026gt; ServerName users.example.org ServerAdmin admin@example.org DocumentRoot /var/www/users.example.org/www/public \u0026lt;Directory /var/www/users.example.org/www/public\u0026gt; AllowOverride AuthConfig FileInfo Indexes Limit Options=ExecCGI,Includes,Indexes,SymLinksIfOwnerMatch,MultiViews Options -Indexes -MultiViews +SymLinksIfOwnerMatch LimitRequestBody 10485760 \u0026lt;/Directory\u0026gt; \u0026lt;Directory /var/www/users.example.org/www/public/.well-known\u0026gt; Require all granted \u0026lt;/Directory\u0026gt; SetEnv APP_ENV prod \u0026lt;IfModule suexec_module\u0026gt; SuexecUserGroup userli userli \u0026lt;/IfModule\u0026gt; \u0026lt;IfModule fcgid_module\u0026gt; AddHandler fcgid-script .php FCGIWrapper /var/www/users.example.org/php-fcgi/php-fcgi-starter .php IPCConnectTimeout 20 IPCCommTimeout 60 FcgidBusyTimeout 60 MaxRequestLen 10485760 \u0026lt;Directory /var/www/users.example.org/www/public\u0026gt; Options +ExecCGI \u0026lt;/Directory\u0026gt; \u0026lt;/IfModule\u0026gt; \u0026lt;IfModule mod_headers.c\u0026gt; Header add X-Content-Type-Options \u0026quot;nosniff\u0026quot; Header add X-XSS-Protection \u0026quot;1; mode=block\u0026quot; Header set Referrer-Policy \u0026quot;no-referrer\u0026quot; Header add X-Frame-Options \u0026quot;SAMEORIGIN\u0026quot; \u0026lt;/IfModule\u0026gt; ErrorLog \u0026quot;|/usr/bin/logger -t apache -p local0.error\u0026quot; Protocols h2 http/1.1 SSLEngine On SSLCertificateFile /etc/letsencrypt/live/users.example.org/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/users.example.org/privkey.pem \u0026lt;IfModule mod_headers.c\u0026gt; Header always set Strict-Transport-Security: \u0026quot;max-age=31536000;includeSubdomains\u0026quot; \u0026lt;/IfModule\u0026gt; \u0026lt;/VirtualHost\u0026gt; "
},
{
	"uri": "/userli/installation/customize/",
	"title": "Customize",
	"tags": [],
	"description": "",
	"content": "You can override translation strings individually by putting them into override localization files at translations/\u0026lt;lang\u0026gt;/messages.\u0026lt;lang\u0026gt;.yml. Don\u0026rsquo;t forget to clear the cache with bin/console cache:clear afterwards.\n"
},
{
	"uri": "/userli/development/icons/",
	"title": "Icons",
	"tags": [],
	"description": "Where to get icons",
	"content": "We\u0026rsquo;re using Githubs Octicons v9 for icons on the index page. Icons from V10 onwards look a bit different and don\u0026rsquo;t allign with earlier ones.\nAll icons should be 14*14 px, #333333 on transparent background without padding.\n"
},
{
	"uri": "/userli/installation/checkpassword/",
	"title": "Checkpassword",
	"tags": [],
	"description": "",
	"content": "The PHP console command bin/console app:users:checkpassword provides a checkpassword command to be used for authentication (userdb and passdb lookup) by external services. So far, it\u0026rsquo;s only tested with Dovecot.\nIn order to use the userli checkpassword command with Dovecot (\u0026lt; 2.3), the default_vsz_limit (defaults to 256MB) needs to be raised in the Dovecot configuration. Starting with Dovecot 2.3, the default is 1G.\nExample configuration for using checkpassword in Dovecot:\n/etc/dovecot/conf.d/auth-checkpassword.conf.ext:\npassdb { driver = checkpassword args = /path/to/userli/bin/console app:users:checkpassword } userdb { driver = prefetch } userdb { driver = checkpassword args = /path/to/userli/bin/console app:users:checkpassword }  Required permissions and sudo In order for checkpassword to work as expected, your Dovecot system user needs read access to the userli application.\nIn order to grant the required permissions, add the Dovecot system user to the userli system group:\nadduser dovecot userli "
},
{
	"uri": "/userli/installation/commands/",
	"title": "Commands",
	"tags": [],
	"description": "",
	"content": "This app brings custom commands:\napp:munin:account # Return number of account to munin app:munin:alias # Return number of aliases to munin app:munin:voucher # Return number of vouchers to munin app:registration:mail # Send a registration mail to a user app:report:weekly # Send weekly report to all admins app:reservednames:import # Import reserved names from stdin or file app:users:check # Check if user is present app:users:mailcrypt # Get MailCrypt values for user app:users:quota # Get quota of user if set app:users:remove # Removes all mailboxes from deleted users app:voucher:create # Create voucher for a specific user app:voucher:unlink # Remove connection between vouchers and accounts after 3 months Get more information about each command by running:\nbin/console {{ command }} --help "
},
{
	"uri": "/userli/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/userli/screenshots/",
	"title": "Screenshots",
	"tags": [],
	"description": "",
	"content": "Some screenshots of Userli features\nRecover lost passwordAccount managementAlias addressesAdmin FrontendInvite friends"
},
{
	"uri": "/userli/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/userli/",
	"title": "Userli Documentation",
	"tags": [],
	"description": "Web application to (self-) manage e-mail users and encrypt their mailboxes.",
	"content": "Userli Web application to (self-) manage e-mail users and encrypt their mailboxes.\nFeatures  User self-service (change password/recovery token, set aliases, \u0026hellip;) Invite code system (new users get three invite codes after one week) Domain admins (accounts with admin rights for one domain) Random alias feature for users Recovery tokens to restore accounts when password got lost Support for Dovecot mailbox encryption Multi-language support (English, French, Spanish, Portuguese, Bokmål, and German provided)  Roles Userli supports a role system to help you run your mail server.\n User - Default role Multiplier - Like user but with unlimited invite codes Suspicious - User without invite codes Spam - This account is suspected to be hacked and can\u0026rsquo;t send mail anymore Domain-Admin - Can add/edit/delete users and aliases for their domain Admin - Can add/edit/delete all available data  Contribute This is a start. Please help to improve the documentation.\n"
}]